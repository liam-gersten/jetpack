Jetpack ScottyBy Liam Gersten (lgersten)Description:- A CMU-themed 2D game that resembles the style of Jetpack Joyride, a once popular mobile game. The player, Scotty, uses their jetpack and their reflexes to advance through a progressively more difficult obstacle course of beams, coins, power-ups, and dangerous missiles. How to play:- Make sure all project folders and files are stored in the same folder.- Run jetpack.py- Choose a difficulty from the settings dropdown to begin.- Hold your mouse/touchpad to launch Scotty’s Jetpack and release it to fall.- Make sure to avoid obstacles and watch out for incoming missiles indicated by an exclamation point.- Collect coins to add to your total coin amount, which saves even if you die.- Beware of repetitive behaviors like dying/surviving in specific places or to specific obstacles; the smart generation will adapt to this.- Green power ups slow down time for 15 seconds.- Pink power ups give you invincibility for 10 seconds.- Rare yellow power ups give you supersonic speed and invincibility for 10 seconds.- If you do die, you can revive yourself for 100 coins and gain a 10-second invincibility power up.System requirements:- Python 3 or later- PIL module- To install modules, follow the official Python 3 Documentation’s guide: https://docs.python.org/3/installing/index.html Shortcut/cheat commands:- Use your right and left keyboard keys to increase or decrease the difficulty value (not level) of the game, which will increase or decrease speed.- Press g to enable/disable background graphics. This may be necessary for players on lower-end hardware. - Press c to instantly give yourself 1,000 coins.- Press i to enable/disable power up spawning. This does not change active power ups.- Press m to instantly spawn a missile using the smart missile generator.- Press d to enable/disable debugger mode, which outlines grids and object hit boxes.- Press p to print active chunks to the console as 2D lists.- Press i to print dictionaries containing data collected on the player, as well as dictionaries containing probabilities used for smart generation.